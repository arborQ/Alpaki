@page "/time-sheet/{Year:int}/{Month:int}"
@using System;
@using System.Globalization
@using Alpaki.TimeSheet.Database
@using Microsoft.EntityFrameworkCore
@using Alpaki.TimeSheet.Database.Models
@using Alpaki.Logic.Handlers.UpdateTimeSheet
@using MediatR

@inject ITimeSheetDatabaseContext databaseContext
@inject IMediator mediator;

@code {
    [Parameter]
    public int Year { get; set; }

    [Parameter]
    public int Month { get; set; }

    private int? DaysInMonth { get; set; }
    private int? LastMonthDayCount { get; set; }
    private int? NextMonthDayCount { get; set; }
    private int? TodayDayOfMonth { get; set; }

    private string[] DayNames => CultureInfo.CurrentUICulture.DateTimeFormat.DayNames;

    private string NextMonthUrlPath { get; set; }
    private string PrevMonthUrlPath { get; set; }

    private IList<TimeEntry> TimeEntries { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var firstDayDate = new DateTime(Year, Month, 1);
            var nextMonthFirstDate = firstDayDate.AddMonths(1);
            var prevMonthFirstDate = firstDayDate.AddMonths(-1);
            var monthFirstDayName = firstDayDate.DayOfWeek.ToString();
            var nextMonthFirstDayName = nextMonthFirstDate.DayOfWeek.ToString();

            TodayDayOfMonth = DateTime.Now.Year == Year && DateTime.Now.Month == Month ? DateTime.Now.Day : (int?)null;
            LastMonthDayCount = Array.FindIndex(DayNames, d => d == monthFirstDayName);
            NextMonthDayCount = 7 - Array.FindIndex(DayNames, d => d == nextMonthFirstDayName);

            DaysInMonth = DateTime.DaysInMonth(Year, Month);

            NextMonthUrlPath = $"/time-sheet/{nextMonthFirstDate.Year}/{nextMonthFirstDate.Month}";
            PrevMonthUrlPath = $"/time-sheet/{prevMonthFirstDate.Year}/{prevMonthFirstDate.Month}";
            //TimeEntries = await databaseContext.TimeEntries.Where(te => te.Year == Year && te.Month == Month).ToListAsync();
            TimeEntries = await databaseContext.TimeEntries.Where(te => false).ToListAsync();

            TimeEntries = Enumerable.Range(0, DaysInMonth.Value).Select(_ => new TimeEntry { Day = _ + 1, Hours = TimeEntries.FirstOrDefault(t => t.Day == _ + 1)?.Hours ?? 0 }).ToList();
        }
        catch (ArgumentOutOfRangeException)
        {

        }

        await base.OnParametersSetAsync();
    }

    private async Task SaveTimeSheet()
    {
        await mediator.Send(new UpdateTimeSheetRequest
        {
            Year = Alpaki.CrossCutting.ValueObjects.Year.From(Year),
            Month = Alpaki.CrossCutting.ValueObjects.Month.From(Month),
            Entries = TimeEntries.Select(d => new UpdateTimeSheetRequest.TimeEntryRequest { Day = d.Day, Hours = d.Hours }).ToList()
        });
    }
}

<h3>TimeSheet @Year/@Month</h3>

<div class="calendar-container">
    <button class="btn btn-danger" @onclick="@SaveTimeSheet">Save</button>
    <div class="actions">
        <a href="@PrevMonthUrlPath" class="btn btn-prev"><span class="oi oi-chevron-left" aria-hidden="true"></span></a>
        <a href="@NextMonthUrlPath" class="btn btn-next"><span class="oi oi-chevron-right" aria-hidden="true"></span></a>
    </div>
    <div class="calendar">
        @if (TimeEntries != null)
        {
            foreach (var entry in TimeEntries)
            {
                <section class="task task--info" style="grid-row: @((entry.Day + LastMonthDayCount - 1) / 7 + 2); grid-column: @((entry.Day + LastMonthDayCount - 1) % 7 + 1) / span 1;">
                    <EditTime @bind-Hours="@entry.Hours"></EditTime>
                </section>
            }
        }
        @foreach (var day in DayNames)
        {
            <span class="day-name">@day</span>
        }
        @if (LastMonthDayCount < 7)
        {
            for (var day = 0; day < LastMonthDayCount; day++)
            {
                <div class="day day--disabled"></div>
            }
        }
        @for (var day = 0; day < DaysInMonth; day++)
        {
            <div class="day @((day + 1) == TodayDayOfMonth ? "day--today" : "")">@(day + 1)</div>
        }
        @if (NextMonthDayCount < 7)
        {
            for (var day = 0; day < NextMonthDayCount; day++)
            {
                <div class="day day--disabled">

                </div>
            }
        }
    </div>
</div>
