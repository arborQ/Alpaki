@inject IJSRuntime JSRuntime

@if (InEditMode)
{
    <span>
        <input onfocus="this.select()"
               value="@Hours.ToString("0.00")"
               @ref="HourInput"
               autofocus="@true"
               @onblur="@(() => { InEditMode = false; })"
               @onchange="@((e) => UpdateHoursValue(e.Value.ToString()))"
               class="form-control" />
    </span>
}
else
{
    <button class="btn btn-link" @onclick="@(async () => { InEditMode = true; })">
        @Hours
    </button>
}

@code {
    [Parameter]
    public decimal Hours { get; set; }

    [Parameter]
    public EventCallback<decimal> HoursChanged { get; set; }

    private bool InEditMode = false;
    private ElementReference HourInput;

    private async Task UpdateHoursValue(string input)
    {
        if (decimal.TryParse(input, out var newValue) && newValue != Hours)
        {
            if (newValue < 0)
            {
                newValue = 0;
            }

            if (newValue > 24)
            {
                newValue = 24;
            }
            Hours = newValue;
            await HoursChanged.InvokeAsync(newValue);
        }
        else
        {
            await HoursChanged.InvokeAsync(0);
        }
    }
}
