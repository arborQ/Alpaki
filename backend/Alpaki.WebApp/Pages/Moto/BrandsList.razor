@page "/Moto/BrandsList";
@using Alpaki.Moto.Database;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;

@inject IMotoDatabaseContext databaseContext;
@inject IJSRuntime JsRuntime;

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Marki samochodów</h5>
        <EditForm Model="@searchModel" OnValidSubmit="@HandleValidSubmit">
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind-value="@searchModel.Search" placeholder="Szukaj marki samochodu..." aria-label="Szukaj marki samochodu..." aria-describedby="button-addon2">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary" type="submit">Szukaj</button>
                </div>
            </div>
        </EditForm>
        @if (_brands == null)
        {
            <div>Loading...</div>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Nazwa</th>
                        <th>Ile?</th>
                        <th style="width: 100px;"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var brand in _brands)
                    {
                        <tr>
                            <td>@brand.BrandName</td>
                            <td>@brand.ModelCount</td>
                            <td style="width: 100px;">
                                <button type="button" class="btn btn-primary" @onclick="@(_ => EditBrand(brand.BrandId))">Edytuj</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    class SearchModel
    {
        public string Search { get; set; }
    }

    class BrandViewModel
    {
        public long BrandId { get; set; }

        public string BrandName { get; set; }

        public int ModelCount { get; set; }
    }

    IReadOnlyCollection<BrandViewModel> _brands;
    SearchModel searchModel = new SearchModel { Search = "Toyota" };
    protected override Task OnInitializedAsync()
    {
        return HandleValidSubmit();
    }

    public async Task HandleValidSubmit()
    {
        _brands = await databaseContext.Brands.Where(b => b.BrandName.Contains(searchModel.Search)).Select(b => new BrandViewModel { BrandName = b.BrandName, BrandId = b.BrandId, ModelCount = b.Models.Count }).ToListAsync();
    }

    public async Task EditBrand(long brandId)
    {
        await JsRuntime.InvokeVoidAsync("alert", $"Edit brand {brandId}");
    }
}
